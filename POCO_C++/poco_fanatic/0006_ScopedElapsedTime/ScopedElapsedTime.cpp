//
//  ScopedElapsedTime.cpp
//
//  Created by Setsu on 4/28/10.
//  Copyright 2010 RoundSquare Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//----------------------------------------
//	include
//----------------------------------------
#include "ScopedElapsedTime.h"
#include "ScopedLogMessage.h"

#include <Poco/Stopwatch.h>
#include <Poco/Format.h>

//----------------------------------------
//	ScopedElapsedTimeImpl
//		using RAII idiom
//----------------------------------------
class ScopedElapsedTime::ScopedElapsedTimeImpl : public ScopedLogMessage, public Poco::Stopwatch
{
public:
	ScopedElapsedTimeImpl(	const std::string& commonMsg,
							const std::string& startMsg,
							const std::string& endMsg) :
		ScopedLogMessage(commonMsg, startMsg, endMsg)
	{
		start();
	}
	~ScopedElapsedTimeImpl()
	{
		stop();
		Message(Poco::format(" Elepsed time = %.3fmSec", (1000.0 * elapsed()) / resolution()));
	}

private:
	ScopedElapsedTimeImpl();
	ScopedElapsedTimeImpl(const ScopedElapsedTimeImpl&);
	ScopedElapsedTimeImpl& operator = (const ScopedElapsedTimeImpl&);
};

//----------------------------------------
//	ScopedElapsedTime
//----------------------------------------
ScopedElapsedTime::ScopedElapsedTime(	const std::string& commonMsg,
										const std::string& startMsg,
										const std::string& endMsg) :
	m_pImpl(new ScopedElapsedTimeImpl(commonMsg, startMsg, endMsg))
{
}

ScopedElapsedTime::~ScopedElapsedTime()
{
}

void ScopedElapsedTime::Message(const std::string& msg) const
{
	m_pImpl->Message(msg);
}

Poco::Timestamp::TimeDiff ScopedElapsedTime::elapsed() const
{
	return m_pImpl->elapsed();
}

int ScopedElapsedTime::elapsedSeconds() const
{
	return m_pImpl->elapsedSeconds();
}
